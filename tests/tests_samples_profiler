#!/usr/bin/python3                                                                   
# -*- coding: utf-8 -*-
##############################################################################
#  This file is part of the LPprofiler profiling tool.                       #
#        Copyright (C) 2017  EDF SA                                          #
#                                                                            #
#  LPprofiler is free software: you can redistribute it and/or modify        #
#  it under the terms of the GNU General Public License as published by      #
#  the Free Software Foundation, either version 3 of the License, or         #
#  (at your option) any later version.                                       #
#                                                                            #
#  LPprofiler is distributed in the hope that it will be useful,             #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of            #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
#  GNU General Public License for more details.                              #
#                                                                            #
#  You should have received a copy of the GNU General Public License         #
#  along with LPprofiler.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                            #
############################################################################## 

import unittest
import io,os,sys
sys.path.insert(0,os.path.dirname(os.path.realpath(__file__))+"/..") # For debugging purpose
import lpprofiler.perf_samples_profiler as psp
from contextlib import redirect_stdout

class TestSamplesProfilerMethods(unittest.TestCase):
    def test_report_assembly_usage(self):
        psp_test=psp.PerfSamplesProfiler("","",{})

        # Fill asm count dictionnary with random data
        psp_test.assembly_instructions_counts["vfmadd231pd"]=154
        psp_test.assembly_instructions_counts["add"]=15
        psp_test.assembly_instructions_counts["mov"]=43
        psp_test.assembly_instructions_counts["callq"]=12

        # Capture stdout
        capturedOutput = io.StringIO()

        with redirect_stdout(capturedOutput):
            psp_test._report_assembly_usage()


        expected_result= "\n".join(["",
                          "Table below shows the top 95% of assembly instructions occurence rate in collected samples, samples were collected at a 99Hz frequency:",
                          "-------------------------------------------------------",
                          "|   proportion  | occurence |     asm_instruction     |",
                          "-------------------------------------------------------",
                          "|68.75%         |154        |vfmadd231pd              |",
                          "|19.20%         |43         |mov                      |",
                          "|6.70%          |15         |add                      |",
                          "|5.36%          |12         |callq                    |",
                          "-------------------------------------------------------"])

        for line,expected_line in zip(capturedOutput.getvalue(),expected_result):
            self.assertEqual(line.strip(),expected_line.strip())
        

        
        
        
if __name__ == '__main__':
    unittest.main()
    


            
