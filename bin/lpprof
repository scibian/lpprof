#!/usr/bin/python3.4
# -*- coding: utf-8 -*-
##############################################################################
#  This file is part of the LPprofiler profiling tool.                       #
#        Copyright (C) 2017  EDF SA                                          #
#                                                                            #
#  LPprofiler is free software: you can redistribute it and/or modify        #
#  it under the terms of the GNU General Public License as published by      #
#  the Free Software Foundation, either version 3 of the License, or         #
#  (at your option) any later version.                                       #
#                                                                            #
#  LPprofiler is distributed in the hope that it will be useful,             #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of            #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
#  GNU General Public License for more details.                              #
#                                                                            #
#  You should have received a copy of the GNU General Public License         #
#  along with LPprofiler.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                            #
############################################################################## 

import argparse
import os,sys
sys.path.insert(0,os.path.dirname(os.path.realpath(__file__))+"/..") # For debugging purpose
import lpprofiler.lp_profiler as lpp
import signal
import pkg_resources  # part of setuptools


def main():
    args = parse_args()

    # Build dictionnary with profiling args
    prof_args={}
    pids=None
    launcher=None
    ranks=None
    
    if args.frequency:
        prof_args["frequency"]=args.frequency
        
    if args.o:
        prof_args["output_dir"]=args.o

#    if args.flame:
#        prof_args["flame_graph "]=args.flame
    
    if args.launcher:
        launcher=args.launcher

    # List of pids can be given as :
    # <rank>:<hostname>:<pid>,<rank>:<hostname>:<pid>
    # Or
    # <pid>,<pid>-<pid>,<pid>
    if args.pids:
        pids=_order_pids(args.pids)
        if not pids:
            pids=[str(x) for x in _get_list_from_args(args.pids)]
            
        launcher='pid'

    if args.ranks:
        ranks=_get_list_from_args(args.ranks)
    
    # Build profiler 
    lpprof=lpp.LpProfiler(launcher,pids,ranks,args.binary,prof_args)

    # Run profiling
    lpprof.run()

    # Print profiling report
    lpprof.report()



def _order_pids(unsorted_pids):
    """ Transform pids given as
     [<rank>:<hostname>:<pid>,<rank>:<hostname>:<pid>,...]
    to a list sorted by ranks:
     [<hostname>:<pid>,<hostname>:<pid>,...]
    """    
    result=[]
    
    for el in sorted(unsorted_pids.split(',')):
        splitted_el=el.split(':')
        if len(splitted_el)>2:
            result.append(splitted_el[1]+':'+splitted_el[2])
        else:
            return None

        
    return result
    
    
def _get_list_from_args(args):
    """
    Transform argument:
     a0,a1,a2,a3....a4
     To list :
     [a0,a1,a2,a3,a3+1,a3+2,......,a4]
    """
    result=[]
    
    el_list=args.split(",")
    for el in el_list:
        el_sp=el.split("-")
        if len(el_sp)==2:
            for elnum in range(int(el_sp[0]),int(el_sp[1])+1):
                result.append(elnum)
        else:
            result.append(int(el))
            
    return result
    

    
def parse_args():
    """ Manage arguments """
    parser = argparse.ArgumentParser(description='LPprofiler profiling tool.',\
                                 formatter_class=argparse.RawTextHelpFormatter)

    group = parser.add_mutually_exclusive_group(required=False)
    
    group.add_argument('--launcher',help='parallel jobs launcher (default=std)',
                       default='std')
    group.add_argument('--pids',help='pids of processes to be profiled')



#    parser.add_argument('-flame',action='store_true',
#                        help='Build a Flame Graph. For a better result compile your code with -g and -fno-omit-frame-pointer.')

    version = pkg_resources.require("lpprof")[0].version
    parser.add_argument('--version', action='version',
                        version='%(prog)s {}'.format(version))
    parser.add_argument('--ranks',help='list of ranks to be profiled')
    parser.add_argument('--frequency',help='Sampling frequency, default is 99Hz')
    parser.add_argument('-o',help='Output directory, default is perf_<date>')
    parser.add_argument('binary',help='binary to be profiled',nargs='?')

    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)
                
    return parser.parse_args()

if __name__ == '__main__':
    main()
        
